

#include<iostream>
#define SIZE 10
using namespace std;
class priority
{
int Queue1[SIZE],front,rear;
public:
priority()
{
front=0;
rear=-1;
}
int isFull();
int isEmpty();
void Enqueue(int x);
int Dequeue();
};
int priority::isFull()
{
if(rear==SIZE-1)
return 1;
else
return 0;
}
int priority::isEmpty()
{
if(rear==front-1)
return 1;
else
return 0;
}
int priority::Dequeue()
{
if(isEmpty()==1)
{
cout<<endl<<" Queue EMPTY...!";
}
else
{
return Queue1[front++];
}
}
void priority::Enqueue(int x)
{
if(isFull()==1)
{
cout<<endl<<" Queue full..!";
}
else
{
rear++;
if(rear==0)
Queue1[rear]=x;
else
{
int index;
for(index=rear-1; index>=0; index--)
{
if(x < Queue1[index])
{
Queue1[index+1]=Queue1[index];
}
else
{
break;
}
}
Queue1[index+1]=x;
}
cout<<endl<<"Priority Queue: ";
for(int i=0;i<=rear;i++)
cout<<Queue1[i]<<",";
}
}
int main()
{
priority obj;
int i, n, p, d;
cout<<"\n How many jobs: ";
cin>>n;
for(i=0;i<n;i++)
{
cout<<"\n Enter job(1-9): ";
cin>>p;
obj.Enqueue(p);
}
cout<<"\n Dequeue:";
while(!obj.isEmpty())
{
d=obj.Dequeue();
cout<<endl<<d<<", ";
}
cout<<endl;
return 22;
}













/*Queueis a linear structure which follows a particular order in which the operations are
performed. The order is First In First Out (FIFO).A good example of queue is any queue of
consumers for a resource where the consumer that came first is served first.
The difference between stacks and queues is in removing. In a stack we remove the item the
most recently added; in a queue, we remove the item the least recently added.
The following steps should be taken to enqueue (insert) data into a queue :
Step 1 − Check if queue is full.
Step 2 − If queue is full, produce over􀏐low error and exit.
Step 3 − If queue is not full, increment rear pointer to point next empty space.
Step 4 − Add data element to the queue location, where rear is pointing.
Step 5 − return success.
The following steps are taken to perform dequeue operation:
Step 1 − Check if queue is empty.
Step 2 − If queue is empty, produce under􀏐low error and exit.
Step 3 − If queue is not empty, access data where front is pointing.
Step 3 − Increment front pointer to point next available data element.
Step 5 − return success.*/
