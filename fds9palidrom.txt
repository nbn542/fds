
#include<iostream>
using namespace std;
class strng
{ public:
char cInp[30],cWSpace[30],cStack[20],cReverse[30];
int top;
public:
strng()
{
top=-1;
}
void Palindrome1();
void reverse1();
void push(char );
char pop();
};
void strng :: push(char element)
{
if(top<20)
cStack[++top]=element;
else
cout<<"Stack Full";
}
char strng :: pop()
{
if(top!=-1)
return cStack[top--];
else
cout<<"Stack Empty";
}
void strng :: Palindrome1()
{
int i=0,b=1;
cout<<"\n\nEnter the String:";
cin>>cWSpace;
cout<<"\n\nEntered the String is:"<<cWSpace;
while(cWSpace[i]!='\0')
{
push(cWSpace[i]);
i++;
}
i=0;
while(cWSpace[i]!='\0')
{
char ch=pop();
if(cWSpace[i]!=ch)
b=0;
i++;
}
if(b==1)
cout<<"\n\nTHE STRING IS PALINDROME";
else
cout<<"\n\nTHE STRING IS NOT PALINDROME";
}
void strng :: reverse1()
{
int i=0;
cout<<"\nEnter the String:";
cin>>cWSpace;
cout<<"\nEntered the String is:"<<cWSpace;
while(cWSpace[i]!='\0')
{
push(cWSpace[i]);
i++;
}
i=0;
while(cWSpace[i]!='\0')
{
char ch=pop();
cReverse[i]=ch;
i++;
}
cReverse[i]='\0';
cout<<"\nReverse String is:"<<cReverse;
cout<<"\n";
}
int main()
{
strng a;
 a.Palindrome1();
a.reverse1();
return 0;
 }















/*Stack is a linear data structure which follows a particular order in which the operations
are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out). In
Stack all Operations such as Insertion and Deletion are permitted at only one end called
Top.
Push(): Adds an item in the stack. If the stack is full, then it is said to be an
Overflow condition.
 Pop(): Removes an item from the stack. 
isFull() − check if stack is full.
 isEmpty() − check if stack is empty
Algorithm to check palindrome string using stack
1. Find the length of the input string using strlen function and store it in a integer
variable "length".
2. Using a for loop, traverse input string from index 0 to length-1 and push all
characters in stack.
3. Remove (Pop) characters from stack one by one using a for loop and compare it
with corresponding character of input string from beginning(traverse from index 0
to length-1). If we found a mismatch the input string is not a palindrome string
otherwise palindrome string.*/
