#include<iostream>
//#include
//#include
using namespace std;
#define SIZE 5
// ERROR HANDLINH NOT DOne
// program is not working correct.
//
class dequeue
{
int a[10],front,rear,count;
public:
dequeue();
void add_at_beg(int);
void add_at_end(int);
void delete_fr_front();
void delete_fr_rear();
void display();
};
dequeue::dequeue()
{
front=-1;
rear=-1;
count=0;
}
void dequeue::add_at_beg(int item)
{
int i;
if(front==-1)
{
front++;
rear++;
a[rear]=item;
count++;
}
else if(rear>=SIZE-1)
{
cout<<"Insertion is not possible,overflow!!!!"<<endl;
}
else
{
for(i=count;i>=0;i--)
{
a[i]=a[i-1];
}
a[i]=item;
count++;
rear++;
}
}
void dequeue::add_at_end(int item)
{
if(front==-1)
{
front++;
rear++;
a[rear]=item;
count++;
}
else if(rear>=SIZE-1)
{
cout<<"\nInsertion is not possible,overflow!!!";
return;
}
else
{
a[++rear]=item;
}
}
void dequeue::display()
{
for(int i=front;i<=rear;i++)
{
cout<<a[i]<<" "; }
}
void dequeue::delete_fr_front()
{
if(front==-1)
{
cout<<"Deletion is not possible:: Dequeue is empty";
return;
}
else
{
if(front==rear)
{
front=rear=-1;
return;
}
cout<<"The deleted element is "<<a[front];
front=front+1;
}
}
void dequeue::delete_fr_rear()
{
if(front==-1)
{
cout<<"Deletion is not possible:Dequeue is empty";
return;
}
else
{
if(front==rear)
{
front=rear=-1;
}
cout<<"The deleted element is "<< 
a[rear];
rear=rear-1;
}
}
int main()
{
int c,item;
dequeue d1;
do
{
cout<<"\n\n****DEQUEUE OPERATION****\n";
cout<<"\n1-Insert at beginning";
cout<<"\n2-Insert at end";
cout<<"\n3_Display";
cout<<"\n4_Deletion from front";
cout<<"\n5-Deletion from rear";
cout<<"\n6_Exit";
cout<<"\nEnter your choice<1-4>:";
cin>>c;
switch(c)
{
case 1:
cout<<"Enter the element to be inserted:";
cin>>item;
d1.add_at_beg(item);
break;
case 2:
cout<<"Enter the element to be inserted:";
cin>>item;
d1.add_at_end(item);
break;
case 3:
d1.display();
break;
case 4:
d1.delete_fr_front();
break;
case 5:
d1.delete_fr_rear();
break;
case 6:
exit(1);
break;
default:
cout<<"Invalid choice";
break;
}
}while(c!=7);
return 0;
}












/*Double Ended Queue can be represented in two ways, those are as follows...

Input Restricted Double Ended Queue
In input restricted double ended queue, the insertion operation is performed at only one
end and deletion operation is performed at both the ends.
Output Restricted Double Ended Queue
In output restricted double ended queue, the deletion operation is performed at only one
end and insertion operation is performed at both the ends.
Algorithm for Insertion of element from front:
Step1. Start
Step2. Check the queue is full or not as if (r == maxsize-1) &&(f==0)
Step3. If false update the pointer f as f= f-1(OR f=((f-1)+ maxsize )% maxsize )
Step4. Insert the element at pointer f as Q[f] = element
Step5. Stop
Algorithm for Insertion of element from rear:
Step1: Start
Step2: Check the queue is full or not as if (r == maxsize-1) &&(f==0) if yes queue is full
Step3: If false update the pointer r as r= r+1
Step4: Insert the element at pointer r as Q[r] = element
Step5: Stop
Algorithm for deletion of element from front:
Step1: Start
Step2: Check the queue is empty or not as if (f == r) if yes queue is empty.
Step3: If false update pointer f as f = f+1and delete element at position f as element= Q[f]
Step4: If ( f== r) reset pointer f and r as f = r = -1
Step5: Stop*/
